<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dog_idle_2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
image_speed = 0.4;

//Collision states
grounded = false;   // Indicates whether or not player is on solid ground
col_right = false;  // Horizontal collision
col_left = false;

//Movement
movedir_x = 1;  // Store direction of horizontal movement
hspd = 0;       // Store player x &amp; y speeds
vspd = 0;

//Acceleration
accel_ground_def = 0.5;
accel_ground = accel_ground_def;
accel_air_def = 0.2;
accel_air = accel_air_def;

//hspd
running = 0;
hspd_max_def = 1; // Default max horizontal ground speed when not running
hspd_max = hspd_max_def;
hspd_max_air_def = 1; // Default max horizontal air speed
hspd_max_air = hspd_max_air_def;

//Falling (vspd)
vspd_max_def = 7; // Default max fall speed
vspd_max = vspd_max_def;

//Special
sitting = false;
blocker_spawned = false;
my_spawn = noone;

whine_1 = false;
whine_2 = false;

alpha_healthbar = 1;

//Death
iamdead = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sitting
sitting = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step

if (sleep) exit;

//Collision
scr_dog_movecollide();

//AI    
if (col_right)
    {
    hspd = 0;
    if (!blocker_spawned) 
        {
        alarm_set(0, 30);
        my_spawn = instance_create(x - 17, y - 12, obj_solid);
        blocker_spawned = true;
        }
    }
else if (distance_to_object(obj_player) &lt; 32)
    {
    if (!whine_1)
        {
        whine_1 = true;
        audio_play_sound(snd_warning_1, 10, false);    
        }
    hspd = 2;
    }
    
if (place_meeting(x, y, obj_dog_whine_2) &amp;&amp; !whine_2)
    {
    whine_2 = true;
    audio_play_sound(snd_warning_2, 10, false);
    }

//Animate
if (sitting)
    {
    sprite_index = spr_dog_sit;
    }
else 
    {
    if (xprevious == x) { image_speed = 0.06; sprite_index = spr_dog_idle_2; }
    else { sprite_index = spr_dog_walk_low; image_speed = 0.1; }
    }

//Healthbar
if (whine_2)
    {
    alpha_healthbar -= 0.01;
    if (alpha_healthbar &lt;= 0) alpha_healthbar = 0;
    }
    
//Death
if (!iamdead &amp;&amp; place_meeting(x, y, obj_attack_box))
    {
    audio_play_sound(snd_sword_attack, 10, false);
    iamdead = true;
    sleep = true;
    with (my_spawn) { instance_destroy(); }
    with (instance_nearest(x, y, obj_backstop)) { instance_destroy(); }
    instance_create(x, y - 6, obj_damage);
    with (instance_create(x, y, obj_dog_dead)) { hspd = 1; vspd = -4; }
    player_level += 1;
    levelup = true;
    instance_destroy();
    //Loot
    with (instance_create(x, y, obj_coin)) { hspd = 2; vspd = -2; }
    with (instance_create(x, y, obj_coin)) { hspd = -1; vspd = -2; }
    with (instance_create(x, y, obj_coin)) { hspd = 0; vspd = -3; }
    with (instance_create(x, y, obj_coin)) { hspd = 1; vspd = -3; }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if (obj_player.playerstate == STATE_PLAYER.combat)
    {
    draw_sprite_ext(spr_dog_healthbar, 0, x, y - 16, 1, 1, 0, c_white, alpha_healthbar);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
